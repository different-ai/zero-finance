**repo**: different-ai/zero-finance

# General Direction
- always go for abstraction over implementation for crypto stuff
- always use pnpm
- always assume the server is already running and is running on port 3050
- anything that is not in /dashboard/tools is meant for the general public (hide wallet addresses by default, etc)
- /dashboard/tools is for crypto power users
- follow instructions well, if not specified go always for the most simple solution 
- always use kebab case for file names
- use viem when possible instead of ethers
- if you mock data always create a new file in memory/mock-data-<name>.md to remember that we need to do get rid of it
- IF you mock stuff describe it at the end of the prompt && also create a new memory file to remember that we need to do get rid of ito
- when you run test run them in non-interactive mode
- use tr to make api calls
- you should understnad that in nextjs a () is a logical path and not a physical path
- when doing ui and user facing stuff do not communicate about the underlying crypto implementation details use abstracted concepts instead
- if you get stuck start to search the web for an answer (e.g. very useful if you don't find right api methods)
- use o4-mini as an llm
- always use shadcn/ui if you want to create a ui component (only create one yourself if non standard)
- always use ai vercel sdk to interact with models. 


- Always check memory in .cursor/rules directory before starting tasks to see if there's a file name with relevant information
- After each significant edit, make a git commit that summarizes the changes


Right way to use trpc: within web:
```ts
import { trpc } from "@/utils/trpc"
```

# Monorepo Structure (PNPM Workspace + Turbo)

This is a PNPM monorepo managed with Turborepo.
Key directories containing applications/packages:
- `packages/`: Contains the main applications and shared libraries.

## Packages:

- **`packages/deep-yield` (`@zero-finance/deep-yield`)**:
  - Purpose: Likely related to yield strategies or AI analysis.
  - Type: Next.js App
  - Runs on Port: **3060** (`pnpm --filter deep-yield dev`)
- **`packages/web` (`@zero-finance/web`)**:
  - Purpose: Main application for the web we're in the process of integraitng packages/bank into it.
  - It does invoicing
  - Providees a bank account dashboard
  - Type: Next.js App
  - Runs on Port: **3050** (`pnpm --filter web dev`)
- **`packages/fluidkey-earn-module` (`@hypr/fluidkey-earn-module`)**:
  - Purpose: Solidity/Foundry project for an "earn" module, likely related to DeFi or yield generation on-chain.
  - Type: Smart Contract / Blockchain
  - Contains: Solidity contracts (`src/`), deployment scripts (`script/`), tests (`test/`), and dependencies like OpenZeppelin.


## `packages/web` Structure (`@zero-finance/web`)

This package contains the main user-facing web application, built with Next.js and tRPC.

- **`src/`**: Main source code directory.
    - **`actions/`**: Server actions for Next.js.
    - **`app/`**: Next.js App Router directory.
        - Contains route definitions (directories like `dashboard/`, `invoice/`, `onboarding/`, etc.) and corresponding `page.tsx` files.
        - Uses route groups like `(authenticated)`, `(public)`, `(external)` to manage layouts and access control.
        - `(authenticated)/dashboard/(bank)/`: Suggests banking related features within the authenticated dashboard.
        - `layout.tsx`: Root layout for the application.
        - `api/`: Contains API route handlers.
            - `trpc/[trpc]/route.ts`: tRPC endpoint.
            - `file-extraction/`: API for file extraction.
            - `invoice-chat/`: API for invoice-related chat.
            - `manual/`: Potentially for manual operations or testing.
            - `upload/`: File upload API.
            - `user/`: User-related API endpoints (allocations, safes).
            - `wallet/`: Wallet-related API endpoints.
            - `webhooks/`: Webhook handlers (e.g., for auth).
    - **`components/`**: Reusable React components.
        - Organized by feature (e.g., `admin/`, `auth/`, `company/`, `invoice/`, `landing/`, `layout/`, `onboarding/`, `payment/`, `settings/`, `transfers/`) or UI elements (`ui/`).
        - `settings/align-integration/`: Components specific to Align integration.
    - **`db/`**: Database related files.
        - `schema.ts`: Defines the Drizzle ORM schema for the database tables.
        - `index.ts`: Initializes and exports the Drizzle client instance.
    - **`hooks/`**: Custom React hooks.
    - **`lib/`**: Core logic, services, and utilities.
        - `sponsor-tx/`: Logic related to sponsored transactions.
        - `store/`: State management stores (e.g., Zustand, Redux).
        - `utils/`: General utility functions.
        - `validators/`: Zod schemas for input validation.
        - `auth.ts`: Authentication related utilities (likely interacting with Privy).
        - `currencies.ts`: Defines supported currencies and their network details.
        - `request-network.ts`: Handles interactions with the Request Network SDK.
        - `ephemeral-key-service.ts`, `ephemeral-wallet-service.ts`: Handle temporary keys/wallets for sharing.
    - **`providers/`**: Context providers (might be related to `components/providers.tsx` if that was a previous convention, or a separate set of providers).
    - **`server/`**: Backend-specific code, primarily for tRPC.
        - `routers/`: Defines tRPC routers for different features.
            - `_app.ts`: Root tRPC router merging all sub-routers.
            - Specific routers for features like `invoice`, `allocations`, `settings`, `onboarding`, `safe`, `funding-source`.
        - `services/`: Backend service logic.
        - `context.ts`: Defines the tRPC context (e.g., user session, DB connection).
    - **`test/`**: Test files.
    - **`trpc/`**: tRPC client setup (`react.ts`).
    - **`types/`**: TypeScript type definitions.
    - **`utils/`**: Client-side utility functions (could also be consolidated under `lib/utils.ts` or differentiated).
    - **`middleware.ts`**: Next.js middleware for handling requests.
- **`public/`**: Static assets.
- **`scripts/`**: Utility scripts for the package.
- **`drizzle/`**: Drizzle ORM migration files and metadata.

# Database Migrations (Drizzle)

- If you make changes to the Drizzle schema (`packages/web/src/db/schema.ts`), you **MUST** generate and run database migrations.
- **Commands (run in `packages/web` directory):**
    ```bash
    pnpm db:generate
    pnpm db:migrate
    ```

# Tools


## Testing invoice creation

You can go faster by using this:
http://localhost:3050/dashboard/create-invoice?invoiceNumber=INV-NUQS-001&issueDate=2024-08-15T00%3A00%3A00.000Z&dueDate=2024-09-14T00%3A00%3A00.000Z&sellerBusinessName=My+Nuqs+Co.&sellerEmail=seller%40nuqs.test&sellerAddress=123+Nuqs+St&sellerCity=Queryville&sellerPostalCode=12345&sellerCountry=Stateland&buyerBusinessName=Client+Corp&buyerEmail=buyer%40client.test&buyerAddress=456+Param+Ave&buyerCity=Urlton&buyerPostalCode=67890&buyerCountry=Webia&paymentType=crypto&currency=USDC&network=base&note=Test+invoice+pre-filled+with+nuqs.&terms=Net+30&bankDetails=null&items=%5B%7B%22id%22%3A1%2C%22name%22%3A%22Web%20Development%22%2C%22quantity%22%3A10%2C%22unitPrice%22%3A%22100.50%22%2C%22tax%22%3A10%7D%2C%7B%22id%22%3A2%2C%22name%22%3A%22Consulting%22%2C%22quantity%22%3A5%2C%22unitPrice%22%3A%22150%22%2C%22tax%22%3A0%7D%5D

this will pre-fill the invoice with nuqs. and allow you to test the invoice creation flow.



## Github

* Use github tools to check repository issues and get repository info.

## Search

- Use search when you encounter issues with sdk or other dependencies.
- Or someitmes if relevant if there's a particular error your encountreing. 

---
In the app directory, nested folders are normally mapped to URL paths. However, you can mark a folder as a Route Group to prevent the folder from being included in the route's URL path.

This allows you to organize your route segments and project files into logical groups without affecting the URL path structure.

Route groups are useful for:

Organizing routes into groups e.g. by site section, intent, or team.
Enabling nested layouts in the same route segment level:
Creating multiple nested layouts in the same segment, including multiple root layouts
Opting specific segments into a layout
Opting for loading skeletons on a specific route
Convention
A route group can be created by wrapping a folder's name in parenthesis: (folderName)

Good to know:

The naming of route groups has no special significance other than for organization. They do not affect the URL path.
Routes that include a route group should not resolve to the same URL path as other routes. For example, since route groups don't affect URL structure, (marketing)/about/page.js and (shop)/about/page.js would both resolve to /about and cause an error.
If you use multiple root layouts without a top-level layout.js file, your home page.js file should be defined in one of the route groups, For example: app/(marketing)/page.js.
Navigating across multiple root layouts will cause a full page load (as opposed to a client-side navigation). For example, navigating from /cart that uses app/(shop)/layout.js to /blog that uses app/(marketing)/layout.js will cause a full page load. This only applies to multiple root layouts.

--- 

# Next.js Route Groups

In Next.js's App Router, folders normally map directly to URL segments. Route Groups offer a way to organize your project files within the `app` directory without altering the URL structure. You create a route group by wrapping a folder name in parentheses, like `(marketing)` or `(shop)`. This grouping is purely for organizational purposes and the name in parentheses (`marketing`, `shop`) will not appear in the actual URL.

Route groups are primarily useful for structuring your project logically (e.g., grouping routes by feature or team) and for enabling more complex layout structures. For instance, you can use them to apply different nested layouts to segments that share the same URL level or even create multiple root layouts within your application. Keep in mind that routes within different groups shouldn't resolve to the same path (e.g., `(marketing)/about` and `(shop)/about` is an error), and navigating between segments managed by different root layouts will trigger a full page refresh.

